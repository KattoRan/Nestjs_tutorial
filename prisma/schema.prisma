// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String   @unique
  avatar    String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles  Article[]
  comments Comment[]
  
  favorites Favorite[]
  followedBy Follow[]  @relation("FollowerUsers")
  following  Follow[]  @relation("FollowingUsers")
}

model Article {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String?
  content     String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comments Comment[]
  commentsCount Int @default(0)

  favoritedBy Favorite[]
  favoriteCount Int @default(0)
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Favorite {
  userId    Int
  articleId Int
  favoritedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@id([userId, articleId])
}

model Follow {
  followerId      Int
  followingId     Int

  follower        User  @relation("FollowingUsers", fields: [followerId], references: [id])
  following       User  @relation("FollowerUsers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}
